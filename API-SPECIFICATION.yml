openapi: 3.0.0
info:
  title: Payment Processing System API
  description: RESTful API for payment processing with Authorize.Net integration
  version: 1.0.0
  contact:
    name: API Support

servers:
  - url: http://localhost:5000
    description: Development server
  - url: https://api.payment-system.com
    description: Production server

tags:
  - name: Authentication
    description: User authentication and registration
  - name: Orders
    description: Order management
  - name: Customers
    description: Customer management
  - name: Payments
    description: Payment processing operations
  - name: Transactions
    description: Transaction tracking and history
  - name: Admin
    description: Admin operations (requires Admin role)
  - name: Health
    description: Health check endpoint

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    IdempotencyKey:
      type: apiKey
      in: header
      name: Idempotency-Key

  schemas:
    Error:
      type: object
      properties:
        statusCode:
          type: integer
        timestamp:
          type: string
          format: date-time
        message:
          type: string
        error:
          type: string

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 6

    RegisterRequest:
      type: object
      required:
        - email
        - password
        - name
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 6
        name:
          type: string

    AuthResponse:
      type: object
      properties:
        accessToken:
          type: string
        user:
          type: object
          properties:
            id:
              type: string
            email:
              type: string
            name:
              type: string
            role:
              type: string
              enum: [ADMIN, CUSTOMER]

    CreateCustomerRequest:
      type: object
      required:
        - email
        - name
      properties:
        email:
          type: string
          format: email
        name:
          type: string
        billingAddress:
          type: object

    CreateOrderRequest:
      type: object
      required:
        - customerId
        - amount
      properties:
        customerId:
          type: string
        amount:
          type: number
          minimum: 0.01
        currency:
          type: string
          default: USD
        metadata:
          type: object

    PurchaseRequest:
      type: object
      required:
        - orderId
        - cardNumber
        - expirationDate
        - cvv
      properties:
        orderId:
          type: string
        cardNumber:
          type: string
          minLength: 13
          maxLength: 19
        expirationDate:
          type: string
          pattern: '^\d{2}\/\d{2}$'
        cvv:
          type: string
          minLength: 3
          maxLength: 4

    CaptureRequest:
      type: object
      required:
        - transactionId
      properties:
        transactionId:
          type: string
        amount:
          type: number
          minimum: 0.01

    RefundRequest:
      type: object
      required:
        - transactionId
      properties:
        transactionId:
          type: string
        amount:
          type: number
          minimum: 0.01

    PaginatedResponse:
      type: object
      properties:
        data:
          type: array
          items: {}
        meta:
          type: object
          properties:
            page:
              type: integer
            limit:
              type: integer
            total:
              type: integer
            totalPages:
              type: integer
            hasNext:
              type: boolean
            hasPrev:
              type: boolean

paths:
  /health:
    get:
      tags:
        - Health
      summary: Check API health status
      responses:
        '200':
          description: API is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  uptime:
                    type: number
                  timestamp:
                    type: string
                  database:
                    type: string

  /api/v1/auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid credentials

  /api/v1/auth/register:
    post:
      tags:
        - Authentication
      summary: Customer registration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: Registration successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '409':
          description: User already exists

  /api/v1/customers:
    post:
      tags:
        - Customers
      summary: Create customer (guest checkout)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCustomerRequest'
      responses:
        '201':
          description: Customer created
    get:
      tags:
        - Customers
      summary: List customers (paginated)
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Customers retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponse'

  /api/v1/customers/{id}:
    get:
      tags:
        - Customers
      summary: Get customer by ID
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Customer found
        '404':
          description: Customer not found

  /api/v1/orders:
    post:
      tags:
        - Orders
      summary: Create order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrderRequest'
      responses:
        '201':
          description: Order created
    get:
      tags:
        - Orders
      summary: List orders (paginated)
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
        - name: limit
          in: query
          schema:
            type: integer
        - name: customerId
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Orders retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponse'

  /api/v1/orders/{id}:
    get:
      tags:
        - Orders
      summary: Get order by ID
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Order found
        '404':
          description: Order not found

  /api/v1/payments/purchase:
    post:
      tags:
        - Payments
      summary: Direct payment (charge immediately)
      security:
        - IdempotencyKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PurchaseRequest'
      responses:
        '201':
          description: Payment processed
        '400':
          description: Invalid payment details
        '409':
          description: Duplicate request (idempotency)

  /api/v1/payments/authorize:
    post:
      tags:
        - Payments
      summary: Authorize payment (hold funds)
      security:
        - IdempotencyKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PurchaseRequest'
      responses:
        '201':
          description: Payment authorized

  /api/v1/payments/capture:
    post:
      tags:
        - Payments
      summary: Capture authorized payment
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CaptureRequest'
      responses:
        '200':
          description: Payment captured

  /api/v1/payments/cancel:
    post:
      tags:
        - Payments
      summary: Cancel/void authorized payment
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - transactionId
              properties:
                transactionId:
                  type: string
      responses:
        '200':
          description: Payment cancelled

  /api/v1/payments/refund:
    post:
      tags:
        - Payments
      summary: Refund payment (full or partial)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefundRequest'
      responses:
        '200':
          description: Refund processed

  /api/v1/transactions:
    get:
      tags:
        - Transactions
      summary: List transactions (paginated, filtered)
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
        - name: limit
          in: query
          schema:
            type: integer
        - name: orderId
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            type: string
        - name: type
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Transactions retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponse'

  /api/v1/transactions/{id}:
    get:
      tags:
        - Transactions
      summary: Get transaction by ID
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Transaction found
        '404':
          description: Transaction not found

  /api/v1/admin/transactions:
    get:
      tags:
        - Admin
      summary: View all transactions (Admin only)
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
        - name: limit
          in: query
          schema:
            type: integer
      responses:
        '200':
          description: Transactions retrieved
        '403':
          description: Forbidden (not admin)

  /api/v1/admin/stats:
    get:
      tags:
        - Admin
      summary: Dashboard statistics (Admin only)
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Stats retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalOrders:
                    type: integer
                  totalTransactions:
                    type: integer
                  pendingOrders:
                    type: integer
                  capturedTransactions:
                    type: integer

  /api/v1/admin/refund:
    post:
      tags:
        - Admin
      summary: Manual refund (Admin only)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefundRequest'
      responses:
        '200':
          description: Refund processed

  /api/v1/admin/cancel:
    post:
      tags:
        - Admin
      summary: Manual cancel (Admin only)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - transactionId
              properties:
                transactionId:
                  type: string
      responses:
        '200':
          description: Transaction cancelled
