generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  CUSTOMER
}

enum OrderStatus {
  PENDING
  AUTHORIZED
  CAPTURED
  CANCELLED
  REFUNDED
  FAILED
}

enum TransactionStatus {
  PENDING
  AUTHORIZED
  CAPTURED
  CANCELLED
  REFUNDED
  PARTIAL_REFUNDED
  FAILED
  ERROR
}

enum TransactionType {
  PURCHASE
  AUTHORIZE
  CAPTURE
  CANCEL
  REFUND
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  role      UserRole @default(CUSTOMER)
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders       Order[]
  transactions Transaction[]
  auditLogs    AuditLog[]

  @@map("users")
}

model Customer {
  id             String   @id @default(uuid())
  email          String
  name           String
  billingAddress Json?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  orders Order[]

  @@map("customers")
}

model Order {
  id         String      @id @default(uuid())
  customerId String
  userId     String?
  amount     Decimal     @db.Decimal(10, 2)
  currency   String      @default("USD")
  status     OrderStatus @default(PENDING)
  metadata   Json?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  customer     Customer      @relation(fields: [customerId], references: [id])
  user         User?         @relation(fields: [userId], references: [id])
  transactions Transaction[]

  @@index([customerId])
  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@map("orders")
}

model Transaction {
  id                    String            @id @default(uuid())
  orderId               String
  userId                String?
  transactionId         String?           @unique
  type                  TransactionType
  status                TransactionStatus @default(PENDING)
  amount                Decimal           @db.Decimal(10, 2)
  currency              String            @default("USD")
  maskedCardNumber      String?
  cardType              String?
  authorizationCode     String?
  gatewayResponseCode   String?
  gatewayResponseReason String?
  idempotencyKey        String?           @unique
  parentTransactionId   String?
  metadata              Json?
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt

  order             Order         @relation(fields: [orderId], references: [id])
  user              User?         @relation(fields: [userId], references: [id])
  parentTransaction Transaction?  @relation("TransactionHierarchy", fields: [parentTransactionId], references: [id])
  childTransactions Transaction[] @relation("TransactionHierarchy")
  auditLogs         AuditLog[]

  @@index([orderId])
  @@index([userId])
  @@index([status])
  @@index([type])
  @@index([idempotencyKey])
  @@index([createdAt])
  @@map("transactions")
}

model AuditLog {
  id            String   @id @default(uuid())
  userId        String?
  transactionId String?
  action        String
  details       Json?
  ipAddress     String?
  userAgent     String?
  createdAt     DateTime @default(now())

  user        User?        @relation(fields: [userId], references: [id])
  transaction Transaction? @relation(fields: [transactionId], references: [id])

  @@index([userId])
  @@index([transactionId])
  @@index([action])
  @@index([createdAt])
  @@map("audit_logs")
}
